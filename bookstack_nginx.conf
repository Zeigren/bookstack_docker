# MODIFY SECTIONS IF USING NGINX FOR SSL
# https://nginx.org/en/docs/ngx_core_module.html
user nginx;
worker_processes ${NGINX_WORKER_PROCESSES};
worker_rlimit_nofile ${NGINX_WORKER_RLIMIT_NOFILE};

error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    multi_accept on;
    worker_connections ${NGINX_WORKER_CONNECTIONS};
}

# https://nginx.org/en/docs/http/ngx_http_core_module.html
http {
    charset utf-8;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    server_tokens off;
    log_not_found off;
    types_hash_max_size 2048;
    types_hash_bucket_size 64;
    keepalive_timeout 65s;

    # MIME
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # https://nginx.org/en/docs/http/ngx_http_log_module.html
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    # https://nginx.org/en/docs/http/ngx_http_upstream_module.html
    upstream fastcgi_backend {
        server bookstack:9000;
    }

    # https://nginx.org/en/docs/http/ngx_http_ssl_module.html
    # https://nginx.org/en/docs/http/configuring_https_servers.html
    # UNCOMMENT IF USING NGINX FOR SSL
    # server {
    #     listen 80;
    #     listen [::]:80;
    #     server_name ${NGINX_HOST};
    #     return 301 https://$host$request_uri;
    # }

    server {
        # COMMENT IF USING NGINX FOR SSL
        listen 80;
        listen [::]:80;

        # UNCOMMENT IF USING NGINX FOR SSL
        # listen 443 ssl http2;
        # listen [::]:443 ssl http2;
        # ssl_certificate /etc/nginx/certs/${NGINX_SSL_CERT};
        # ssl_certificate_key /etc/nginx/certs/${NGINX_SSL_KEY};

        # https://nginx.org/en/docs/http/server_names.html
        server_name ${NGINX_HOST};

        # max file upload size
        client_max_body_size ${NGINX_CLIENT_MAX_BODY_SIZE};
        client_body_timeout ${NGINX_CLIENT_BODY_TIMEOUT};

        # https://nginx.org/en/docs/http/ngx_http_gzip_module.html
        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_min_length 256;
        gzip_types
        text/plain
        text/css
        text/js
        text/xml
        text/javascript
        application/json
        application/javascript
        application/x-javascript
        application/xml
        application/rss+xml
        application/atom+xml
        image/svg+xml;

        # Static files location
        root /var/www/bookstack/public;

        index index.php index.html index.htm;

        location / {
            try_files $uri $uri/ /index.php?$query_string;
            expires -1;
        }

        # https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html
        location ~ \.php$ {
            fastcgi_pass fastcgi_backend;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            # 404
            try_files $fastcgi_script_name =404;
            # fastcgi settings
            fastcgi_index index.php;
            fastcgi_buffers 8 16k;
            fastcgi_buffer_size 32k;
        }

        # Set cache policies for assets and media
        location /uploads {
            autoindex off;
            expires max;
            access_log off;
            add_header Cache-Control "no-cache, public, must-revalidate, proxy-revalidate";
        }

        location ~* \.(?:css(\.map)?|js(\.map)?|jpe?g|png|gif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv)$ {
            expires max;
            access_log off;
            add_header Cache-Control "no-cache, public, must-revalidate, proxy-revalidate";
        }

        # Set cache policies for svg and fonts
        location ~* \.(?:svgz?|ttf|ttc|otf|eot|woff2?)$ {
            add_header Access-Control-Allow-Origin "*";
            expires max;
            access_log off;
            add_header Cache-Control "no-cache, public, must-revalidate, proxy-revalidate";
        }

        # Deny access to dotfiles (.files)
        location ~ /\.(?!well-known) {
            access_log off;
            deny all;
        }
    }
}
